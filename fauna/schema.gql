type User {
  name: String!
  email: String! @unique
  password: String!
  phone: String
  spaces: [Space]! @relation
  items: [Item]! @relation
  contacts: [Contact]! @relation(name: "user_contacts")
}

type Contact {
  owner: User! @relation(name: "user_contacts")
  user: User!
}

type Space {
  name: String!
  description: String
  owner: User!
}

type Item {
  name: String!
  description: String
  type: ItemType!
  owner: User!
}

type AvailableItem {
  model: AvailabilityModel!
  model_id: String!
  item: Item!
}

type SpaceUser {
  space: Space!
  user: User!
}

enum AvailabilityModel {
  SPACE
  USER
}

enum ItemType {
  VEHICLE
  REAL_ESTATE
  ELECTRONICS
  OTHER
}

type Token @embedded {
  ttl: Time!
  secret: String!
  email: String!
  userId: String!
}

type Mutation {

  registerUser(
    name: String!,
    email: String!,
    password: String!
  ): User @resolver(name: "RegisterUser")

  login(
    email: String!,
    password: String!
  ): Token @resolver(name: "LoginUser")

  createSpace(
    name: String!,
    description: String,
    owner: String!
  ): Space @resolver(name: "CreateSpace")

  createItem(
    name: String!,
    description: String,
    type: ItemType!,
    owner: String!
  ): Item @resolver(name: "CreateItem")

  createContact(
    owner: String!
    user: String!
  ): Contact @resolver(name: "CreateContact")

  createAvailableItem(
    model: AvailabilityModel!
    model_id: String!
    item_id: String!
  ): AvailableItem @resolver(name: "CreateAvailableItem")
}

type ShortUser @embedded {
  name: String!
  email: String!
  spaces_count: Int!
  items_count: Int!
  contacts_count: Int!
}

type Query {
  findUserByEmail(email: String): User
  getUserByEmail(email: String): ShortUser @resolver(name: "GetUserByEmail")
  getUserById(id: String): ShortUser @resolver(name: "GetUserById")
  listUsers: [User]
  getModelItems(model: AvailabilityModel!, model_id: String!): [AvailableItem!] @resolver(name: "GetModelItems")
}
